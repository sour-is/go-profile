// Code generated by go-bindata.
// sources:
// schema/0001-create-table-group.sql
// schema/0002-create-table-group_role.sql
// schema/0003-create-table-group_user.sql
// schema/0004-create-table-hash.sql
// schema/0005-create-table-hash_value.sql
// schema/0006-create-view-group_users.sql
// schema/0007-create-view-group_roles.sql
// schema/0008-create-view-user_roles.sql
// schema/0009-create-view-hash_values.sql
// schema/0010-insert-into-group.sql
// schema/0011-insert-into-group_role.sql
// schema/0012-insert-into-group_user.sql
// schema/0013-insert-into-hash.sql
// schema/0014-insert-into-hash_value.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema0001CreateTableGroupSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x4f\xbd\xce\x83\x30\x0c\xdc\x79\x0a\x8f\x89\xc4\xc2\x27\x21\x7d\x0b\x43\x00\xb7\x8d\x1a\x42\x95\x86\x81\x89\x50\xfa\xc7\x12\x10\x85\x3e\x7f\xa1\xa2\x20\x75\xe8\x66\x9f\xef\x7c\x77\x91\x42\xa6\x11\x34\x0b\x05\x82\xb9\x75\xcd\xd0\x1a\x20\x0e\xcc\x73\x51\x9f\x0d\xd4\xb6\x27\x9e\x47\x41\xa6\x1a\x64\x26\x04\xb0\x4c\xa7\x05\x97\xa3\x36\x41\xa9\xdd\x89\x5d\x3e\xda\x4b\xd5\x1b\x78\x96\x5d\x75\x2f\x3b\xf2\xe7\xfb\xab\xc0\x5d\xfe\xfd\x20\x1c\x14\x4f\x98\xca\x61\x8f\x39\x90\xd5\x9d\x4e\xb7\x09\x5b\xc2\x7d\xbc\xdc\x19\xa1\x0e\x05\x94\x5b\x2e\x31\xe0\xd6\x36\x71\xf8\x95\x2f\xf0\x20\xc6\x0d\xcb\x84\x86\x68\xc7\xd4\x11\x75\x30\xf4\xd7\x7f\x88\x52\x21\xc6\xee\xef\xa5\x38\xd5\xd6\x79\x05\x00\x00\xff\xff\x79\x46\xa2\x5d\x0c\x01\x00\x00")

func schema0001CreateTableGroupSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0001CreateTableGroupSql,
		"schema/0001-create-table-group.sql",
	)
}

func schema0001CreateTableGroupSql() (*asset, error) {
	bytes, err := schema0001CreateTableGroupSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0001-create-table-group.sql", size: 268, mode: os.FileMode(420), modTime: time.Unix(1490391637, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0002CreateTableGroup_roleSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x31\x4f\xc3\x30\x10\x85\xf7\xfe\x8a\x1b\x13\xa9\x4b\x91\x2a\xb1\x74\xb8\x3a\x97\x62\x61\x9d\x91\xed\x0c\x4c\x71\x28\x2d\x44\x20\xa7\x32\x29\xbf\x1f\x37\x25\x6d\x89\xc4\x66\xdf\x7d\xef\xe9\xdd\x13\x86\xd0\x11\x38\x5c\x2b\x02\xff\x16\xbb\xe3\xa1\x8e\xdd\xe7\xce\x43\x36\x83\x71\xd0\xbe\x7a\x68\x43\x9f\x2d\x16\x39\x14\x54\x62\xa5\x1c\x70\xa5\xd4\xfc\x84\x34\x5f\x87\xdd\xb6\xf7\xf0\xdd\xc4\xed\x7b\x13\xb3\xbb\xe5\x32\x07\xd6\x37\xc4\xd9\xef\xdf\xfd\x23\x3d\x5f\x5d\xb2\xf1\x35\x3f\xcb\xf2\x0b\xb1\xff\xa8\xff\xc4\xbb\x66\x1b\x18\xa1\xd9\x3a\x83\x92\xdd\x14\x4d\xcb\x52\x1b\x92\x1b\x1e\x8c\x6e\x85\x69\x65\xa8\x24\x43\x2c\xc8\xfe\x5e\xeb\xa7\x04\x80\xe6\x74\xb6\xa2\xd4\x93\x40\x2b\xb0\xa0\x71\x5a\x3d\x15\xa7\xf6\x58\x03\x0a\x27\x35\xcf\x72\x20\xde\x48\xa6\x95\x0c\xa1\x2b\xd6\x97\xb6\xc4\x03\x1a\x4b\x6e\x75\xec\xf7\xf7\x29\xaa\x52\x49\x36\x7c\xea\x97\x36\xfc\x04\x00\x00\xff\xff\x64\xb6\xcb\x84\x84\x01\x00\x00")

func schema0002CreateTableGroup_roleSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0002CreateTableGroup_roleSql,
		"schema/0002-create-table-group_role.sql",
	)
}

func schema0002CreateTableGroup_roleSql() (*asset, error) {
	bytes, err := schema0002CreateTableGroup_roleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0002-create-table-group_role.sql", size: 388, mode: os.FileMode(420), modTime: time.Unix(1490391774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0003CreateTableGroup_userSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\x3f\x4f\xc3\x30\x14\xc4\xf7\x7e\x8a\x1b\x1d\xa9\x4b\x25\x90\x58\x3a\xbc\x3a\x2f\xc5\xc2\x3c\x57\x8e\x33\x74\x8a\xcb\x9f\x42\x84\x94\xa2\xd0\xf0\xf9\xb1\x69\x2b\x4a\x46\xdf\xef\xee\x74\x7e\xda\x33\x05\x46\xa0\x95\x65\xc4\xb7\xe1\x30\x7e\xb6\xe3\xd7\xeb\x10\xa1\x66\xb8\x08\xdd\x4b\x44\xd7\x1f\xd5\x62\x51\x40\x5c\x80\x34\xd6\xce\x33\x3e\x39\xbf\x77\xc3\xf3\xfb\x6e\x50\x37\xb7\xff\xf1\xc6\x9b\x47\xf2\x5b\x3c\xf0\x16\xea\xaf\x6a\x7e\x8a\x15\xd9\x92\xd1\xb9\x45\x5d\xc9\xda\x49\x1d\x3c\x19\x09\x88\xfb\x8f\xf6\x6a\x56\x82\x95\xf3\x6c\xd6\x32\xad\x2d\x12\xf2\x5c\xb1\x67\xd1\x5c\x9f\xa7\xc7\xa9\x03\x70\x82\x92\x2d\xa7\x4f\x6b\xaa\x35\x95\x7c\x51\x9b\x4d\x99\x4f\x21\x0e\xa4\x83\x71\x32\x2b\xc0\xb2\x36\xc2\x4b\xd3\xf7\x87\x72\x95\x62\x15\x35\x36\x40\xdf\x93\xaf\x39\x2c\xc7\xe3\xfe\x2e\x4d\xb5\x36\xc5\x7e\x1f\xed\x53\xd7\xff\x04\x00\x00\xff\xff\x88\x3e\x92\xee\x51\x01\x00\x00")

func schema0003CreateTableGroup_userSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0003CreateTableGroup_userSql,
		"schema/0003-create-table-group_user.sql",
	)
}

func schema0003CreateTableGroup_userSql() (*asset, error) {
	bytes, err := schema0003CreateTableGroup_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0003-create-table-group_user.sql", size: 337, mode: os.FileMode(420), modTime: time.Unix(1490391827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0004CreateTableHashSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8f\x4f\x8f\x82\x30\x10\xc5\xef\x7c\x8a\x39\xb6\x09\x17\x36\x21\xd9\x0b\x87\x02\xb3\xbb\xcd\x96\x62\x6a\x39\x70\xa2\x15\x31\x70\xb0\x1a\x40\x3f\xbf\xa0\x01\x8d\x07\x6f\xf3\xe7\xbd\x37\xbf\x49\x14\x32\x8d\xa0\x59\x2c\x10\x4c\x6b\x87\xd6\x00\xf1\xe0\x51\x56\xdd\xde\x40\xe7\x46\x12\x04\x14\x64\xae\x41\x16\x42\x00\x2b\x74\x5e\x71\x39\x39\x33\x94\xda\x9f\xc5\x76\x38\x37\xf5\x68\xe0\x6a\xfb\xba\xb5\x3d\xf9\x0a\xc3\xa7\xc1\x5f\xe3\x9c\x3d\x36\x1f\x44\x1b\xc5\x33\xa6\x4a\xf8\xc7\x12\xc8\x0a\x40\xe7\xd5\x3c\x5a\xe8\x96\x6b\xfe\x4b\x28\xf5\x28\xa0\xfc\xe5\x12\x23\xee\xdc\x29\x8d\xdf\x28\xa3\x00\x52\xfc\x61\x85\xd0\x90\xfc\x31\xb5\x45\x1d\x5d\xc6\xc3\x37\x24\xb9\x10\xd3\xff\xf7\xa6\xda\x75\xce\xbb\x05\x00\x00\xff\xff\xd7\x0b\xff\x45\x10\x01\x00\x00")

func schema0004CreateTableHashSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0004CreateTableHashSql,
		"schema/0004-create-table-hash.sql",
	)
}

func schema0004CreateTableHashSql() (*asset, error) {
	bytes, err := schema0004CreateTableHashSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0004-create-table-hash.sql", size: 272, mode: os.FileMode(420), modTime: time.Unix(1490391880, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0005CreateTableHash_valueSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x4f\x6b\xc2\x40\x10\xc5\xef\x7e\x8a\x77\x4c\xc0\x43\x2c\x08\xbd\x78\x18\x37\x13\xbb\x74\x3b\x2b\x9b\xcd\xc1\x53\x36\x6d\x95\x04\x4b\x0a\x56\x85\x7e\xfb\xae\x56\x62\xff\x78\x9c\x79\xbf\x79\xf3\x78\xca\x31\x79\x86\xa7\xb9\x61\x84\xb6\xf9\x68\xeb\x63\xf3\x76\x58\x07\x24\x23\x5c\x16\xdd\x6b\x40\xd7\xef\x93\xc9\x24\x85\x58\x0f\xa9\x8c\x19\x0f\xea\x76\xfd\x19\x70\x6c\x76\x2f\x6d\xb3\x4b\xee\xa6\xd3\x5b\xcc\xc5\x72\xa0\xb2\x2c\xfb\x8d\x2d\x9d\x7e\x22\xb7\xc2\x23\xaf\x90\x0c\x5f\xc7\xd7\x0f\xe9\x89\x52\x56\x4a\xef\x48\x8b\x47\xd8\x6c\xeb\x1f\xd6\x51\x04\x0a\xeb\x58\x2f\xe4\x8f\x49\x7a\xd6\x1c\x17\xec\x58\x14\x97\xdf\x91\xc2\x3f\x02\xb0\x82\x9c\x0d\xc7\x3a\x14\x95\x8a\x72\xbe\xee\xab\x65\x7e\xaa\x49\x2c\x48\x79\x6d\x65\x94\x82\x65\xa1\x85\x67\xba\xef\xdf\xf3\x79\x3c\x2c\xa8\x32\x1e\xea\x81\x5c\xc9\x7e\x76\xd8\x6f\xee\x63\x5e\x63\xe2\xd9\x79\xa8\x9f\xbb\xfe\x2b\x00\x00\xff\xff\x3f\x7d\x11\xba\x6d\x01\x00\x00")

func schema0005CreateTableHash_valueSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0005CreateTableHash_valueSql,
		"schema/0005-create-table-hash_value.sql",
	)
}

func schema0005CreateTableHash_valueSql() (*asset, error) {
	bytes, err := schema0005CreateTableHash_valueSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0005-create-table-hash_value.sql", size: 365, mode: os.FileMode(420), modTime: time.Unix(1490393218, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0006CreateViewGroup_usersSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0e\x72\x75\x0c\x71\xe5\xe2\x0c\xf3\x74\x0d\x57\x48\x48\x2f\xca\x2f\x2d\x88\x2f\x2d\x4e\x2d\x2a\x4e\x50\x70\x0c\xe6\x52\x00\x82\x60\x57\x1f\x57\xe7\x10\x30\x13\x04\x12\x4a\x13\xf4\xa0\xea\x32\x53\x40\x8a\x14\x10\x3c\x1d\x84\xaa\x74\xa0\xaa\xc4\xe2\x82\xd4\xe4\x12\x88\x1a\x28\x1b\x4d\x05\x58\x27\x92\x21\xc8\xf2\x20\x7b\x40\x2e\x81\x48\x83\x59\x60\x49\xb7\x20\x7f\x5f\xb8\x2a\x0d\x24\x27\x27\x80\xf4\xc0\x65\xbc\xfc\x3d\xfd\x60\xa6\x82\x2c\x53\xf0\xf7\x53\xd0\xd0\x40\x73\xbd\x2d\x92\x33\x40\x02\x9a\x9a\x9a\x80\x00\x00\x00\xff\xff\xf4\xfa\xf3\x4b\x11\x01\x00\x00")

func schema0006CreateViewGroup_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0006CreateViewGroup_usersSql,
		"schema/0006-create-view-group_users.sql",
	)
}

func schema0006CreateViewGroup_usersSql() (*asset, error) {
	bytes, err := schema0006CreateViewGroup_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0006-create-view-group_users.sql", size: 273, mode: os.FileMode(420), modTime: time.Unix(1490392431, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0007CreateViewGroup_rolesSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0e\x72\x75\x0c\x71\xe5\x52\x00\x82\x30\x4f\xd7\x70\x85\x84\xf4\xa2\xfc\xd2\x82\xf8\xa2\xfc\x9c\xd4\xe2\x04\x05\xc7\x60\xb0\x4c\xb0\xab\x8f\xab\x73\x08\x98\x09\x02\x09\x45\x09\x7a\x50\x75\x99\x29\x20\x45\x0a\x08\x9e\x0e\xaa\xaa\xc4\xe2\x82\xd4\xe4\x12\x88\x1a\x28\x1b\x4d\x05\xc8\x26\x88\x3c\x98\x85\x24\x9b\x8e\xa1\xbf\x38\x33\x3d\x2f\x1e\xd3\x98\x74\x98\x73\x50\xd4\x41\x44\xc0\xaa\xdc\x82\xfc\x7d\xe1\xca\x35\x90\xbc\x98\x00\x72\x03\x5c\xc6\xcb\xdf\xd3\x4f\x01\x66\x12\xd0\x54\x05\x7f\x3f\x05\x0d\x0d\x34\xdf\xda\x22\xd9\x07\x12\xd0\xd4\xd4\x04\x04\x00\x00\xff\xff\x08\x8a\x56\xcc\x44\x01\x00\x00")

func schema0007CreateViewGroup_rolesSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0007CreateViewGroup_rolesSql,
		"schema/0007-create-view-group_roles.sql",
	)
}

func schema0007CreateViewGroup_rolesSql() (*asset, error) {
	bytes, err := schema0007CreateViewGroup_rolesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0007-create-view-group_roles.sql", size: 324, mode: os.FileMode(420), modTime: time.Unix(1490392373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0008CreateViewUser_rolesSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x8b\x83\x30\x14\x84\xef\xfb\x2b\xde\xcd\x08\xb2\x3f\x60\x61\x0f\x21\xa6\x90\x62\x63\xd1\xd0\x1e\x7d\xa5\x88\x14\x4a\x95\xa4\xfe\xff\x26\xcf\x90\xd6\x3a\xc7\x99\xf9\xc6\x3c\x45\x23\xb9\x91\x3f\xe0\x75\x52\xf2\x0c\x38\xbb\xde\x76\x76\xbc\xf7\x0e\x81\xb7\x14\xb4\xb2\x92\xc2\x40\xa9\x5a\xa3\xb4\x30\xe4\x05\xe1\x8c\xbf\xd4\x0f\xcd\x85\xc4\x22\xa5\x8d\x3c\x56\x5c\x48\x86\xd6\xb7\x2e\x6e\xea\xaf\xcf\x8f\x34\x28\xfb\x0b\x48\xb6\x36\xdf\xa3\x39\xad\x6e\xc8\xd5\x6e\x78\x28\x16\x69\x69\x43\x53\x4e\xe8\xae\xa9\x0f\x69\x83\xe1\x60\xc7\x79\xea\x42\xd3\xdf\xe9\xa9\x14\xed\x6b\xa5\x21\xc6\xf1\x37\xf8\x2f\x41\xad\x81\x31\x46\xf3\xf1\x45\xf0\x0f\xf1\x34\x77\x1b\x1e\x5d\x74\xf3\xd5\x31\x5c\x97\xb0\x40\x34\xf8\xcd\x2c\x66\xee\xf5\x0a\x00\x00\xff\xff\xa0\x91\x60\x41\x87\x01\x00\x00")

func schema0008CreateViewUser_rolesSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0008CreateViewUser_rolesSql,
		"schema/0008-create-view-user_roles.sql",
	)
}

func schema0008CreateViewUser_rolesSql() (*asset, error) {
	bytes, err := schema0008CreateViewUser_rolesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0008-create-view-user_roles.sql", size: 391, mode: os.FileMode(420), modTime: time.Unix(1490393359, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0009CreateViewHash_valuesSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\xe0\x52\x00\x82\x30\x4f\xd7\x70\x85\x84\x8c\xc4\xe2\x8c\xf8\xb2\xc4\x9c\xd2\xd4\xe2\x04\x05\xc7\x60\xb0\x4c\xb0\xab\x8f\xab\x73\x08\x44\x15\x08\x80\x15\x25\xe8\x41\xd4\x66\xa6\x80\xd4\x29\xc0\x39\x3a\x18\xca\x12\x8b\x0b\x52\x93\x4b\x20\xaa\xa0\x6c\x4c\x45\x60\xed\x79\x89\xb9\xa9\x48\xa6\x81\xb9\x68\x4a\x21\x6e\x83\x69\xc8\x4e\xad\x44\x52\x0f\xe2\xe1\x55\x0e\xe1\x20\x34\x40\xf8\x60\x1d\x6e\x41\xfe\xbe\x70\xad\x1a\x10\x57\xc1\xf9\x5e\xfe\x9e\x7e\x28\x5a\x14\xfc\xfd\x14\x34\x34\x30\xc2\xc1\x16\x9b\xa5\x40\x09\x4d\x4d\x4d\x2e\x40\x00\x00\x00\xff\xff\x43\x5c\xbb\x6a\x6b\x01\x00\x00")

func schema0009CreateViewHash_valuesSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0009CreateViewHash_valuesSql,
		"schema/0009-create-view-hash_values.sql",
	)
}

func schema0009CreateViewHash_valuesSql() (*asset, error) {
	bytes, err := schema0009CreateViewHash_valuesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0009-create-view-hash_values.sql", size: 363, mode: os.FileMode(420), modTime: time.Unix(1490393281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0010InsertIntoGroupSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x48\x48\x2f\xca\x2f\x2d\x48\x50\xd0\x80\x30\xe2\x33\x53\x12\x74\x14\x12\x12\x8b\x0b\x52\x93\x4b\x40\x2c\x88\xb4\x26\x57\x98\xa3\x4f\xa8\x6b\x30\x17\xa7\x86\xba\xa1\xba\x8e\x82\x7a\x4a\x6a\x5a\x62\x69\x4e\x09\x88\xe9\xe8\xe2\xeb\xe9\xa7\xae\xa9\x03\x92\x33\x42\x93\xf3\xf4\x73\x74\x0e\xf1\x0c\x73\x85\x4a\x1b\xa3\x49\x87\x02\xdd\x11\xac\xae\x09\x08\x00\x00\xff\xff\xac\xbd\x9e\x95\x90\x00\x00\x00")

func schema0010InsertIntoGroupSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0010InsertIntoGroupSql,
		"schema/0010-insert-into-group.sql",
	)
}

func schema0010InsertIntoGroupSql() (*asset, error) {
	bytes, err := schema0010InsertIntoGroupSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0010-insert-into-group.sql", size: 144, mode: os.FileMode(420), modTime: time.Unix(1490394238, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0011InsertIntoGroup_roleSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x48\x48\x2f\xca\x2f\x2d\x88\x2f\xca\xcf\x49\x4d\x50\xd0\x80\xf2\x32\x53\x12\x74\x14\x12\x12\x8b\x0b\x52\x93\x4b\x40\x2c\xb0\xac\x26\x57\x98\xa3\x4f\xa8\x6b\x30\x97\x82\x82\x86\xba\xa1\xba\x8e\x82\xba\x16\x88\x48\x4c\xc9\xcd\xcc\x53\xd7\xd4\x01\x0b\x1b\xc1\x85\x33\xf3\x12\x93\x4b\x32\xcb\x52\x61\x32\xc6\x70\x19\x07\xab\xd2\xe2\xd4\x22\x4c\x71\x5c\xea\x33\x12\x8b\x33\xf4\xca\x8b\x32\x4b\x52\xf5\xb0\x68\x85\x0a\x01\x59\xf9\xe5\x79\x20\x39\x2e\x40\x00\x00\x00\xff\xff\x08\x3e\x61\x7f\xde\x00\x00\x00")

func schema0011InsertIntoGroup_roleSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0011InsertIntoGroup_roleSql,
		"schema/0011-insert-into-group_role.sql",
	)
}

func schema0011InsertIntoGroup_roleSql() (*asset, error) {
	bytes, err := schema0011InsertIntoGroup_roleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0011-insert-into-group_role.sql", size: 222, mode: os.FileMode(420), modTime: time.Unix(1490825878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0012InsertIntoGroup_userSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x48\x48\x2f\xca\x2f\x2d\x88\x2f\x2d\x4e\x2d\x4a\x50\xd0\x80\xf2\x32\x53\x12\x74\x14\x12\xc0\x62\x9a\x5c\x61\x8e\x3e\xa1\xae\xc1\x5c\x9c\x1a\xea\x86\xea\x3a\x0a\xea\x45\xf9\xf9\x25\xea\x9a\x80\x00\x00\x00\xff\xff\x1a\x48\x19\x1f\x43\x00\x00\x00")

func schema0012InsertIntoGroup_userSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0012InsertIntoGroup_userSql,
		"schema/0012-insert-into-group_user.sql",
	)
}

func schema0012InsertIntoGroup_userSql() (*asset, error) {
	bytes, err := schema0012InsertIntoGroup_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0012-insert-into-group_user.sql", size: 67, mode: os.FileMode(420), modTime: time.Unix(1490824656, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0013InsertIntoHashSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x48\xc8\x48\x2c\xce\x48\xe0\xe2\xd4\x00\x33\xe2\x33\x53\x12\x74\x14\x12\x12\x8b\x0b\x52\x93\x4b\x40\x2c\xb0\x60\x5e\x62\x6e\x6a\x82\x26\x57\x98\xa3\x4f\xa8\x6b\x30\x50\xa9\xba\xa1\xba\x8e\x82\x7a\x7a\x4e\x7e\x52\x62\x0e\x88\x55\x50\x94\x9f\x96\x99\x93\xaa\xae\x09\x08\x00\x00\xff\xff\xc1\x36\xf7\x1e\x59\x00\x00\x00")

func schema0013InsertIntoHashSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0013InsertIntoHashSql,
		"schema/0013-insert-into-hash.sql",
	)
}

func schema0013InsertIntoHashSql() (*asset, error) {
	bytes, err := schema0013InsertIntoHashSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0013-insert-into-hash.sql", size: 89, mode: os.FileMode(420), modTime: time.Unix(1490394266, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0014InsertIntoHash_valueSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x48\xc8\x48\x2c\xce\x88\x2f\x4b\xcc\x29\x4d\x4d\xe0\xe2\xd4\x80\x70\x33\x53\x12\x74\xa0\x32\xd9\xa9\x95\x70\x36\x44\x95\x26\x57\x98\xa3\x4f\xa8\x6b\x30\x50\xb5\xba\xa1\xba\x8e\x82\x7a\x4a\x66\x71\x41\x4e\x62\x65\x7c\x5e\x62\x6e\x2a\x88\x1f\x9a\x07\x62\xa5\x28\x84\x16\xa7\x16\xa9\x6b\xea\xc0\xd5\xa5\xe6\x26\x66\xe6\x80\x18\xa5\x40\x09\x87\xbc\xfc\xa2\xd4\x82\x9c\x4a\xbd\xe2\xfc\xd2\x22\xbd\xcc\x62\x64\x85\x69\x99\x45\xc5\x25\xe8\xc6\x21\x2b\xc8\x49\x44\x96\x07\x5b\x03\x08\x00\x00\xff\xff\x8f\x3c\xf9\xf3\xd4\x00\x00\x00")

func schema0014InsertIntoHash_valueSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0014InsertIntoHash_valueSql,
		"schema/0014-insert-into-hash_value.sql",
	)
}

func schema0014InsertIntoHash_valueSql() (*asset, error) {
	bytes, err := schema0014InsertIntoHash_valueSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0014-insert-into-hash_value.sql", size: 212, mode: os.FileMode(420), modTime: time.Unix(1490394397, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/0001-create-table-group.sql": schema0001CreateTableGroupSql,
	"schema/0002-create-table-group_role.sql": schema0002CreateTableGroup_roleSql,
	"schema/0003-create-table-group_user.sql": schema0003CreateTableGroup_userSql,
	"schema/0004-create-table-hash.sql": schema0004CreateTableHashSql,
	"schema/0005-create-table-hash_value.sql": schema0005CreateTableHash_valueSql,
	"schema/0006-create-view-group_users.sql": schema0006CreateViewGroup_usersSql,
	"schema/0007-create-view-group_roles.sql": schema0007CreateViewGroup_rolesSql,
	"schema/0008-create-view-user_roles.sql": schema0008CreateViewUser_rolesSql,
	"schema/0009-create-view-hash_values.sql": schema0009CreateViewHash_valuesSql,
	"schema/0010-insert-into-group.sql": schema0010InsertIntoGroupSql,
	"schema/0011-insert-into-group_role.sql": schema0011InsertIntoGroup_roleSql,
	"schema/0012-insert-into-group_user.sql": schema0012InsertIntoGroup_userSql,
	"schema/0013-insert-into-hash.sql": schema0013InsertIntoHashSql,
	"schema/0014-insert-into-hash_value.sql": schema0014InsertIntoHash_valueSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"0001-create-table-group.sql": &bintree{schema0001CreateTableGroupSql, map[string]*bintree{}},
		"0002-create-table-group_role.sql": &bintree{schema0002CreateTableGroup_roleSql, map[string]*bintree{}},
		"0003-create-table-group_user.sql": &bintree{schema0003CreateTableGroup_userSql, map[string]*bintree{}},
		"0004-create-table-hash.sql": &bintree{schema0004CreateTableHashSql, map[string]*bintree{}},
		"0005-create-table-hash_value.sql": &bintree{schema0005CreateTableHash_valueSql, map[string]*bintree{}},
		"0006-create-view-group_users.sql": &bintree{schema0006CreateViewGroup_usersSql, map[string]*bintree{}},
		"0007-create-view-group_roles.sql": &bintree{schema0007CreateViewGroup_rolesSql, map[string]*bintree{}},
		"0008-create-view-user_roles.sql": &bintree{schema0008CreateViewUser_rolesSql, map[string]*bintree{}},
		"0009-create-view-hash_values.sql": &bintree{schema0009CreateViewHash_valuesSql, map[string]*bintree{}},
		"0010-insert-into-group.sql": &bintree{schema0010InsertIntoGroupSql, map[string]*bintree{}},
		"0011-insert-into-group_role.sql": &bintree{schema0011InsertIntoGroup_roleSql, map[string]*bintree{}},
		"0012-insert-into-group_user.sql": &bintree{schema0012InsertIntoGroup_userSql, map[string]*bintree{}},
		"0013-insert-into-hash.sql": &bintree{schema0013InsertIntoHashSql, map[string]*bintree{}},
		"0014-insert-into-hash_value.sql": &bintree{schema0014InsertIntoHash_valueSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

