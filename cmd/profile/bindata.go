// Code generated by go-bindata.
// sources:
// schema/0001-create-table-group.sql
// schema/0002-create-table-group_role.sql
// schema/0003-create-table-group_user.sql
// schema/0004-create-table-hash.sql
// schema/0005-create-table-hash_value.sql
// schema/0006-create-view-group_users.sql
// schema/0007-create-view-group_roles.sql
// schema/0008-create-view-user_roles.sql
// schema/0009-create-view-hash_values.sql
// schema/0010-insert-into-group.sql
// schema/0011-insert-into-group_role.sql
// schema/0012-insert-into-group_user.sql
// schema/0013-insert-into-hash.sql
// schema/0014-insert-into-hash_value.sql
// schema/0015-create-view-aspects.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema0001CreateTableGroupSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x3f\x6f\x83\x30\x10\xc5\x77\x3e\xc5\x8d\xb6\xc4\x42\x25\xa4\x2e\x0c\xc6\x5c\x5b\xab\xc6\x54\xee\x31\x30\x61\x4a\xf3\x87\xc5\x20\x02\xf9\xfc\x11\x11\x01\x29\x43\xb6\xbb\x77\xef\xde\xfb\x49\x8b\x82\x10\x48\xa4\x1a\xc1\x9d\xc6\x7e\x1e\x1c\xb0\x00\xd6\xb9\xee\xfe\x1d\x74\x7e\x62\x51\xc4\xc1\x14\x04\xa6\xd4\x1a\x44\x49\x45\xad\x8c\xb4\x98\xa3\xa1\x70\x71\x37\x97\xe1\xd0\x4e\x0e\xae\xcd\xd8\x9e\x9b\x91\xbd\xc5\xf1\xfe\x10\x6e\x79\x2f\x0c\x3f\x56\xe5\xc2\x56\xf0\x8d\x15\xb0\xbd\x9d\x2f\xb7\x45\xdb\xe0\x1e\x5d\xe1\xaa\xf0\x80\x03\x9a\x4f\x65\x30\x51\xde\xf7\x59\xfa\xc4\x97\x44\x90\xe1\x87\x28\x35\x81\xfc\x12\xf6\x17\x29\x99\xa7\xe3\x3b\xc8\x42\x6b\x41\x78\x5f\xea\xbf\xce\x07\xb7\x00\x00\x00\xff\xff\x79\x46\xa2\x5d\x0c\x01\x00\x00")

func schema0001CreateTableGroupSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0001CreateTableGroupSql,
		"schema/0001-create-table-group.sql",
	)
}

func schema0001CreateTableGroupSql() (*asset, error) {
	bytes, err := schema0001CreateTableGroupSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0001-create-table-group.sql", size: 268, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0002CreateTableGroup_roleSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x4f\xc3\x30\x14\x84\xf7\xfc\x8a\x1b\x13\xa9\x4b\x91\x2a\xb1\x74\x70\xed\x97\x62\x61\x3d\x23\xe7\x65\x60\x8a\x43\x69\x21\x02\x25\x55\x48\xf9\xfd\xa8\x29\x69\x4b\x25\x36\xfb\xfc\xdd\xe9\x7c\x3a\x90\x12\x82\xa8\x95\x23\xc4\xb7\xbe\x3b\xec\xab\xbe\xfb\xdc\x46\xa4\x09\x26\xa1\x79\x8d\x68\xda\x21\x9d\xcf\x33\x18\xca\x55\xe9\x04\x5c\x3a\x37\x3b\x22\xf5\xd7\x7e\xbb\x19\x22\xbe\xeb\x7e\xf3\x5e\xf7\xe9\xdd\x62\x91\x81\xfd\x15\x71\xca\xfb\xf7\xfd\x91\x9e\x2f\x29\xe9\x74\x9a\x9d\x6c\xd9\x99\xd8\x7d\x54\x7f\xea\x5d\xba\x8d\x8c\xf6\x5c\x48\x50\x96\xe5\x16\x4d\x80\xdc\x07\xb2\x6b\x1e\x83\xae\x8d\x09\x10\x28\xa7\x40\xac\xa9\xf8\xfd\x6d\xbc\x25\x00\xcf\x30\xe4\x48\x08\x5a\x15\x5a\x19\x9a\xd4\xf2\xc9\x1c\xd7\x63\x0f\xa5\xc5\x7a\x4e\x32\x10\xaf\x2d\xd3\xd2\xb6\x6d\x67\x56\xe7\xb5\xf4\x83\x0a\x05\xc9\xf2\x30\xec\xee\xa1\xbd\x73\x4a\x68\xbc\x54\x2f\x4d\xfb\x13\x00\x00\xff\xff\x64\xb6\xcb\x84\x84\x01\x00\x00")

func schema0002CreateTableGroup_roleSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0002CreateTableGroup_roleSql,
		"schema/0002-create-table-group_role.sql",
	)
}

func schema0002CreateTableGroup_roleSql() (*asset, error) {
	bytes, err := schema0002CreateTableGroup_roleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0002-create-table-group_role.sql", size: 388, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0003CreateTableGroup_userSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcd\x4e\xc3\x30\x10\x84\xef\x79\x8a\x39\x3a\x52\x2f\x95\x40\xe2\xd2\xc3\xd6\xde\x14\x0b\xb3\xae\x9c\xcd\xa1\xa7\xb8\xfc\x14\x22\xa4\x14\x85\x86\xe7\x47\xa1\xad\x28\x3d\x7a\xe6\xf3\xa7\xd1\xda\xc4\xa4\x0c\xa5\x65\x60\xe4\xb7\x61\x3f\x7e\xb6\xe3\xd7\xeb\x90\x61\x0a\x9c\x83\xee\x25\xa3\xeb\x0f\x66\x3e\x2f\x21\x51\x21\x4d\x08\xb3\xa9\x3e\x92\xdf\xdb\xe1\xf9\x7d\x3b\x98\x9b\xdb\xff\xf5\x3a\xf9\x47\x4a\x1b\x3c\xf0\x06\xe6\x4f\x35\x3b\x7e\x2b\x27\x64\xaa\x4e\x16\x73\x11\xdb\x28\xb5\x26\xf2\xa2\xc8\xbb\x8f\xf6\x62\x56\x01\x54\x31\xb1\x5f\xc9\xb5\xb6\x2c\x80\xc4\x15\x27\x16\xcb\xf5\x69\x7a\xbe\x26\x80\x28\x70\x1c\x58\x19\x96\x6a\x4b\x8e\xcf\x69\xb3\x76\xd3\x29\x24\x82\xac\xfa\x28\x45\x09\x96\x95\x17\x5e\xf8\xbe\xdf\xbb\x25\x1c\x57\xd4\x04\x85\xbd\xa7\x54\xb3\x2e\xc6\xc3\xee\x0e\x36\x86\x40\xca\xbf\x8f\xf6\xa9\xeb\x7f\x02\x00\x00\xff\xff\x88\x3e\x92\xee\x51\x01\x00\x00")

func schema0003CreateTableGroup_userSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0003CreateTableGroup_userSql,
		"schema/0003-create-table-group_user.sql",
	)
}

func schema0003CreateTableGroup_userSql() (*asset, error) {
	bytes, err := schema0003CreateTableGroup_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0003-create-table-group_user.sql", size: 337, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0004CreateTableHashSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xbf\x6e\x83\x30\x10\x87\x77\x9e\xe2\x46\x5b\x62\xa1\x12\x52\x17\x06\x63\xae\xad\x55\x63\x2a\xf7\x18\x98\xb0\x4b\xa9\x60\xa8\x5b\x01\xc9\xf3\x47\x24\x82\x44\x19\xb2\xdd\x9f\xdf\x7d\xf7\x49\x8b\x82\x10\x48\xe4\x1a\xc1\x0d\x7e\x1e\x1c\xb0\x08\x2e\x65\x3b\x7e\x3b\x18\xc3\xc2\x92\x84\x83\xa9\x08\x4c\xad\x35\x88\x9a\xaa\x56\x19\x69\xb1\x44\x43\xf1\x1a\xf6\xf3\x7f\xdf\x2d\x0e\x8e\x7e\xea\x06\x3f\xb1\xa7\x34\xbd\x1e\xc4\x3b\x2e\xf8\xdf\xfe\x41\xe8\xc3\xaa\x52\xd8\x06\xde\xb1\x01\xb6\x0b\xf0\x75\xb5\x8e\x36\xbb\xed\x5b\x7c\x03\xe5\x11\x07\x34\xaf\xca\x60\xa6\x42\xf8\x2b\xf2\x3b\xcb\x2c\x81\x02\x5f\x44\xad\x09\xe4\x9b\xb0\x9f\x48\xd9\x61\xf9\x79\x06\x59\x69\x2d\x08\xcf\x4d\xfb\x35\x86\xe8\x14\x00\x00\xff\xff\xd7\x0b\xff\x45\x10\x01\x00\x00")

func schema0004CreateTableHashSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0004CreateTableHashSql,
		"schema/0004-create-table-hash.sql",
	)
}

func schema0004CreateTableHashSql() (*asset, error) {
	bytes, err := schema0004CreateTableHashSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0004-create-table-hash.sql", size: 272, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0005CreateTableHash_valueSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x4d\x6b\xf2\x40\x14\x85\xf7\xf9\x15\x67\x99\x80\x8b\xf8\x82\xf0\x6e\x5c\x5c\x27\x37\x76\xe8\xf4\x8e\x4c\x6e\x16\xae\x32\x69\xab\x24\x58\x52\xb0\x2a\xf4\xdf\x17\xad\xc4\x7e\x2d\xe7\x9c\x87\xe7\x0c\xd7\x04\x26\x65\x28\x2d\x1c\x23\x76\xed\x5b\xd7\x9c\xda\x97\xe3\x26\x22\x4d\x70\x0d\xfa\xe7\x88\x7e\x38\xa4\xd3\x69\x06\xf1\x0a\xa9\x9d\x9b\x8c\xed\x6e\xf3\x1e\x71\x6a\xf7\x4f\x5d\xbb\x4f\xff\xcd\x66\x7f\x31\x57\xe5\x48\xe5\x79\xfe\x1d\x5b\x05\xfb\x40\x61\x8d\x7b\x5e\x23\x1d\x57\x27\xb7\x85\xec\x4c\x19\x2f\x95\x06\xb2\xa2\x88\xdb\x5d\xf3\x45\x9d\x00\x40\xe9\x03\xdb\xa5\xfc\x90\x64\x97\x2e\x70\xc9\x81\xc5\x70\xf5\xf9\xa5\xf8\x8b\x00\xbc\xa0\x60\xc7\xca\x30\x54\x19\x2a\xf8\x96\xd7\xab\xe2\x7c\x26\xf1\x20\xa3\xd6\x4b\x92\x81\x65\x69\x85\xe7\x76\x18\x5e\x8b\x05\x0a\x2e\xa9\x76\x0a\x73\x47\xa1\x62\x9d\x1f\x0f\xdb\xff\x30\xde\x39\x52\xbe\x3c\x9a\xc7\x7e\xf8\x08\x00\x00\xff\xff\x3f\x7d\x11\xba\x6d\x01\x00\x00")

func schema0005CreateTableHash_valueSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0005CreateTableHash_valueSql,
		"schema/0005-create-table-hash_value.sql",
	)
}

func schema0005CreateTableHash_valueSql() (*asset, error) {
	bytes, err := schema0005CreateTableHash_valueSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0005-create-table-hash_value.sql", size: 365, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0006CreateViewGroup_usersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\xe5\xe2\x0c\xf3\x74\x0d\x57\x48\x48\x2f\xca\x2f\x2d\x88\x2f\x2d\x4e\x2d\x2a\x4e\x50\x70\x0c\xe6\x52\x50\x50\x50\x08\x76\xf5\x71\x75\x0e\x01\x33\x41\x20\xa1\x34\x41\x0f\xaa\x2e\x33\x05\xa4\x48\x01\xc1\xd3\x41\xa8\x4a\x4f\xd0\x4b\x48\x2c\x2e\x48\x4d\x2e\x81\xa8\x81\xb2\xd1\x54\x80\x75\x22\x19\x82\x2c\x0f\xb2\x07\xe4\x12\x88\x34\x98\x05\x96\x74\x0b\xf2\xf7\x85\xab\xd2\x40\x72\x72\x02\x48\x0f\x5c\xc6\xcb\xdf\xd3\x0f\x66\x2a\xc8\x32\x05\x7f\x3f\x05\x0d\x0d\x34\xd7\xdb\x22\x39\x03\x24\xa0\xa9\xa9\x09\x08\x00\x00\xff\xff\xf4\xfa\xf3\x4b\x11\x01\x00\x00")

func schema0006CreateViewGroup_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0006CreateViewGroup_usersSql,
		"schema/0006-create-view-group_users.sql",
	)
}

func schema0006CreateViewGroup_usersSql() (*asset, error) {
	bytes, err := schema0006CreateViewGroup_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0006-create-view-group_users.sql", size: 273, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0007CreateViewGroup_rolesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\xe5\x52\x50\x50\x50\x08\xf3\x74\x0d\x57\x48\x48\x2f\xca\x2f\x2d\x88\x2f\xca\xcf\x49\x2d\x4e\x50\x70\x0c\x06\xcb\x04\xbb\xfa\xb8\x3a\x87\x80\x99\x20\x90\x50\x94\xa0\x07\x55\x97\x99\x02\x52\xa4\x80\xe0\xe9\xa0\xaa\x4a\x2c\x2e\x48\x4d\x2e\x81\xa8\x81\xb2\xd1\x54\x80\x6c\x82\xc8\x83\x59\x48\xb2\xe9\x18\xfa\x8b\x33\xd3\xf3\xe2\x31\x8d\x49\x87\x39\x07\x45\x1d\x44\x04\xac\xca\x2d\xc8\xdf\x17\xae\x5c\x03\xc9\x8b\x09\x20\x37\xc0\x65\xbc\xfc\x3d\xfd\x14\x60\x26\x25\xa4\x27\x28\xf8\xfb\x29\x68\x68\xa0\xf9\xd6\x16\xc9\x3e\x90\x80\xa6\xa6\x26\x20\x00\x00\xff\xff\x08\x8a\x56\xcc\x44\x01\x00\x00")

func schema0007CreateViewGroup_rolesSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0007CreateViewGroup_rolesSql,
		"schema/0007-create-view-group_roles.sql",
	)
}

func schema0007CreateViewGroup_rolesSql() (*asset, error) {
	bytes, err := schema0007CreateViewGroup_rolesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0007-create-view-group_roles.sql", size: 324, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0008CreateViewUser_rolesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\xaa\xc2\x30\x10\x45\xf7\xef\x2b\x66\xd7\x04\x4a\x3f\xe0\x81\x8b\x90\x46\x88\xd4\x54\xda\xa0\xcb\x8e\x48\x29\x82\xd8\x92\xd8\xff\x97\x4c\x43\xb4\x36\xcb\x7b\xe7\x1c\x66\x22\x1b\x25\xac\xfa\x03\x00\x38\x6b\x75\x01\x9c\x7d\xef\x3a\x37\x3e\x7a\x8f\x20\x5a\x2a\x5a\x55\x29\x69\xa1\xd4\xad\xd5\x46\x5a\xca\xc2\xc3\x19\x0b\x9a\x0f\x93\x0b\x89\x79\x6a\x1b\x75\xaa\x84\x54\x0c\x1d\x16\x78\xf5\x53\x7f\x7b\x7d\xb5\xe1\x65\xff\x01\xc9\xd6\xe1\x47\xca\xc9\xba\x21\x57\xde\xb0\x28\xe6\xc9\xb4\xa1\xa9\x27\x74\xdf\xd4\xc7\xe4\x60\x38\xb8\x71\x9e\xba\x30\xe9\x31\x50\xa9\x3a\xd4\xda\x40\xac\xe3\x37\xa0\x43\xa8\x0d\x30\xc6\x48\x1f\x37\x82\x1d\xc4\xd3\xfc\x7d\x78\x76\x31\xe5\xab\x63\x84\x29\x61\x81\x48\xf8\xcb\x2c\x21\xe7\x9c\xbf\x03\x00\x00\xff\xff\xa0\x91\x60\x41\x87\x01\x00\x00")

func schema0008CreateViewUser_rolesSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0008CreateViewUser_rolesSql,
		"schema/0008-create-view-user_roles.sql",
	)
}

func schema0008CreateViewUser_rolesSql() (*asset, error) {
	bytes, err := schema0008CreateViewUser_rolesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0008-create-view-user_roles.sql", size: 391, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0009CreateViewHash_valuesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\xe0\x52\x50\x50\x50\x08\xf3\x74\x0d\x57\x48\xc8\x48\x2c\xce\x88\x2f\x4b\xcc\x29\x4d\x2d\x4e\x50\x70\x0c\x06\xcb\x04\xbb\xfa\xb8\x3a\x87\x40\x54\x81\x00\x58\x51\x82\x1e\x44\x6d\x66\x0a\x48\x9d\x02\x9c\xa3\x83\xa1\x2c\xb1\xb8\x20\x35\xb9\x04\xa2\x0a\xca\xc6\x54\x04\xd6\x9e\x97\x98\x9b\x8a\x64\x1a\x98\x8b\xa6\x14\xe2\x36\x98\x86\xec\xd4\x4a\x24\xf5\x20\x1e\x5e\xe5\x10\x0e\x42\x03\x84\x0f\xd6\xe1\x16\xe4\xef\x0b\xd7\xaa\x01\x71\x15\x9c\xef\xe5\xef\xe9\x87\xa2\x45\xc1\xdf\x4f\x41\x43\x03\x23\x1c\x6c\xb1\x59\x9a\x99\x92\xa0\xa9\xa9\xc9\x05\x08\x00\x00\xff\xff\x43\x5c\xbb\x6a\x6b\x01\x00\x00")

func schema0009CreateViewHash_valuesSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0009CreateViewHash_valuesSql,
		"schema/0009-create-view-hash_values.sql",
	)
}

func schema0009CreateViewHash_valuesSql() (*asset, error) {
	bytes, err := schema0009CreateViewHash_valuesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0009-create-view-hash_values.sql", size: 363, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0010InsertIntoGroupSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x48\x48\x2f\xca\x2f\x2d\x48\x50\xd0\x80\x30\xe2\x33\x53\x12\x74\x14\x12\x12\x8b\x0b\x52\x93\x4b\x40\x2c\x88\xb4\x26\x57\x98\xa3\x4f\xa8\x6b\x30\x17\xa7\x86\xba\xa1\xba\x8e\x82\x7a\x4a\x6a\x5a\x62\x69\x4e\x09\x88\xe9\xe8\xe2\xeb\xe9\xa7\xae\xa9\x03\x92\x33\x42\x93\xf3\xf4\x73\x74\x0e\xf1\x0c\x73\x85\x4a\x1b\xa3\x49\x87\x06\xbb\x06\x05\xab\x6b\x02\x02\x00\x00\xff\xff\xac\xbd\x9e\x95\x90\x00\x00\x00")

func schema0010InsertIntoGroupSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0010InsertIntoGroupSql,
		"schema/0010-insert-into-group.sql",
	)
}

func schema0010InsertIntoGroupSql() (*asset, error) {
	bytes, err := schema0010InsertIntoGroupSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0010-insert-into-group.sql", size: 144, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0011InsertIntoGroup_roleSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x48\x48\x2f\xca\x2f\x2d\x88\x2f\xca\xcf\x49\x4d\x50\xd0\x80\xf2\x32\x53\x12\x74\x14\x12\x12\x8b\x0b\x52\x93\x4b\x40\x2c\xb0\xac\x26\x57\x98\xa3\x4f\xa8\x6b\x30\x97\x82\x82\x86\xba\xa1\xba\x8e\x82\xba\x16\x88\x48\x4c\xc9\xcd\xcc\x53\xd7\xd4\x01\x0b\x1b\xc1\x85\x33\xf3\x12\x93\x4b\x32\xcb\x52\x61\x32\xc6\x70\x19\x07\xab\xd2\xe2\xd4\x22\x4c\x71\x5c\xea\x33\x12\x8b\x33\xf4\xca\x8b\x32\x4b\x52\xf5\xb0\x68\x85\x0a\xe9\x28\xa8\xe7\x97\xe7\x81\xe4\xb8\x00\x01\x00\x00\xff\xff\x08\x3e\x61\x7f\xde\x00\x00\x00")

func schema0011InsertIntoGroup_roleSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0011InsertIntoGroup_roleSql,
		"schema/0011-insert-into-group_role.sql",
	)
}

func schema0011InsertIntoGroup_roleSql() (*asset, error) {
	bytes, err := schema0011InsertIntoGroup_roleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0011-insert-into-group_role.sql", size: 222, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0012InsertIntoGroup_userSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x48\x48\x2f\xca\x2f\x2d\x88\x2f\x2d\x4e\x2d\x4a\x50\xd0\x80\xf2\x32\x53\x12\x74\x14\x12\xc0\x62\x9a\x5c\x61\x8e\x3e\xa1\xae\xc1\x5c\x9c\x1a\xea\x86\xea\x3a\x0a\xea\x45\xf9\xf9\x25\xea\x9a\x80\x00\x00\x00\xff\xff\x1a\x48\x19\x1f\x43\x00\x00\x00")

func schema0012InsertIntoGroup_userSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0012InsertIntoGroup_userSql,
		"schema/0012-insert-into-group_user.sql",
	)
}

func schema0012InsertIntoGroup_userSql() (*asset, error) {
	bytes, err := schema0012InsertIntoGroup_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0012-insert-into-group_user.sql", size: 67, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0013InsertIntoHashSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x48\xc8\x48\x2c\xce\x48\xe0\xe2\xd4\x00\x33\xe2\x33\x53\x12\x74\x14\x12\x12\x8b\x0b\x52\x93\x4b\x40\x2c\xb0\x60\x5e\x62\x6e\x6a\x82\x26\x57\x98\xa3\x4f\xa8\x6b\x30\x17\xa7\x86\xba\xa1\xba\x8e\x82\x7a\x7a\x4e\x7e\x52\x62\x0e\x88\x95\x92\x9a\x96\x58\x9a\x53\xa2\xae\x09\x08\x00\x00\xff\xff\x21\xdb\xcc\xa9\x59\x00\x00\x00")

func schema0013InsertIntoHashSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0013InsertIntoHashSql,
		"schema/0013-insert-into-hash.sql",
	)
}

func schema0013InsertIntoHashSql() (*asset, error) {
	bytes, err := schema0013InsertIntoHashSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0013-insert-into-hash.sql", size: 89, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0014InsertIntoHash_valueSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x48\xc8\x48\x2c\xce\x88\x2f\x4b\xcc\x29\x4d\x4d\xe0\xe2\xd4\x80\x70\x33\x53\x12\x74\xa0\x32\xd9\xa9\x95\x70\x36\x44\x95\x26\x57\x98\xa3\x4f\xa8\x6b\x30\x17\xa7\x86\xba\xa1\xba\x8e\x82\x7a\x4a\x66\x71\x41\x4e\x62\x65\x7c\x5e\x62\x6e\x2a\x88\x1f\x9a\x07\x62\xa5\x28\x84\x16\xa7\x16\xa9\x6b\xea\xc0\xd5\xa5\xe6\x26\x66\xe6\x80\x18\xa5\xc5\xa9\x45\x0e\x79\xf9\x45\xa9\x05\x39\x95\x7a\xc5\xf9\xa5\x45\x7a\x99\xc5\xc8\x0a\xd3\x32\x8b\x8a\x4b\xd0\x8d\x43\x56\x90\x93\x88\x2c\x0f\xb6\x06\x10\x00\x00\xff\xff\x8f\x3c\xf9\xf3\xd4\x00\x00\x00")

func schema0014InsertIntoHash_valueSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0014InsertIntoHash_valueSql,
		"schema/0014-insert-into-hash_value.sql",
	)
}

func schema0014InsertIntoHash_valueSql() (*asset, error) {
	bytes, err := schema0014InsertIntoHash_valueSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0014-insert-into-hash_value.sql", size: 212, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema0015CreateViewAspectsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\xf0\x0f\x52\x08\x72\x0d\xf0\x71\x74\x76\xe5\x52\x50\x08\xf3\x74\x0d\x57\x48\x48\x2c\x2e\x48\x4d\x2e\x29\x4e\x50\x70\x0c\xe6\x52\x50\x50\x50\x08\x76\xf5\x71\x75\x0e\x01\x33\x41\x20\x21\xbd\x28\xbf\xb4\x20\x41\x0f\xaa\x0e\xa4\x0c\xa6\x27\x01\xac\xc8\x2d\xc8\xdf\x17\x5d\x35\x98\x1f\xea\xe7\xe9\xef\x87\x61\x5c\x46\x62\x71\x06\xd1\xa6\x81\x15\x03\x02\x00\x00\xff\xff\x92\xc4\x48\x0f\xbb\x00\x00\x00")

func schema0015CreateViewAspectsSqlBytes() ([]byte, error) {
	return bindataRead(
		_schema0015CreateViewAspectsSql,
		"schema/0015-create-view-aspects.sql",
	)
}

func schema0015CreateViewAspectsSql() (*asset, error) {
	bytes, err := schema0015CreateViewAspectsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0015-create-view-aspects.sql", size: 187, mode: os.FileMode(420), modTime: time.Unix(1520988385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/0001-create-table-group.sql": schema0001CreateTableGroupSql,
	"schema/0002-create-table-group_role.sql": schema0002CreateTableGroup_roleSql,
	"schema/0003-create-table-group_user.sql": schema0003CreateTableGroup_userSql,
	"schema/0004-create-table-hash.sql": schema0004CreateTableHashSql,
	"schema/0005-create-table-hash_value.sql": schema0005CreateTableHash_valueSql,
	"schema/0006-create-view-group_users.sql": schema0006CreateViewGroup_usersSql,
	"schema/0007-create-view-group_roles.sql": schema0007CreateViewGroup_rolesSql,
	"schema/0008-create-view-user_roles.sql": schema0008CreateViewUser_rolesSql,
	"schema/0009-create-view-hash_values.sql": schema0009CreateViewHash_valuesSql,
	"schema/0010-insert-into-group.sql": schema0010InsertIntoGroupSql,
	"schema/0011-insert-into-group_role.sql": schema0011InsertIntoGroup_roleSql,
	"schema/0012-insert-into-group_user.sql": schema0012InsertIntoGroup_userSql,
	"schema/0013-insert-into-hash.sql": schema0013InsertIntoHashSql,
	"schema/0014-insert-into-hash_value.sql": schema0014InsertIntoHash_valueSql,
	"schema/0015-create-view-aspects.sql": schema0015CreateViewAspectsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"0001-create-table-group.sql": &bintree{schema0001CreateTableGroupSql, map[string]*bintree{}},
		"0002-create-table-group_role.sql": &bintree{schema0002CreateTableGroup_roleSql, map[string]*bintree{}},
		"0003-create-table-group_user.sql": &bintree{schema0003CreateTableGroup_userSql, map[string]*bintree{}},
		"0004-create-table-hash.sql": &bintree{schema0004CreateTableHashSql, map[string]*bintree{}},
		"0005-create-table-hash_value.sql": &bintree{schema0005CreateTableHash_valueSql, map[string]*bintree{}},
		"0006-create-view-group_users.sql": &bintree{schema0006CreateViewGroup_usersSql, map[string]*bintree{}},
		"0007-create-view-group_roles.sql": &bintree{schema0007CreateViewGroup_rolesSql, map[string]*bintree{}},
		"0008-create-view-user_roles.sql": &bintree{schema0008CreateViewUser_rolesSql, map[string]*bintree{}},
		"0009-create-view-hash_values.sql": &bintree{schema0009CreateViewHash_valuesSql, map[string]*bintree{}},
		"0010-insert-into-group.sql": &bintree{schema0010InsertIntoGroupSql, map[string]*bintree{}},
		"0011-insert-into-group_role.sql": &bintree{schema0011InsertIntoGroup_roleSql, map[string]*bintree{}},
		"0012-insert-into-group_user.sql": &bintree{schema0012InsertIntoGroup_userSql, map[string]*bintree{}},
		"0013-insert-into-hash.sql": &bintree{schema0013InsertIntoHashSql, map[string]*bintree{}},
		"0014-insert-into-hash_value.sql": &bintree{schema0014InsertIntoHash_valueSql, map[string]*bintree{}},
		"0015-create-view-aspects.sql": &bintree{schema0015CreateViewAspectsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

